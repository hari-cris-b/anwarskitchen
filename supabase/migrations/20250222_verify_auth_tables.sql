-- Begin transaction
BEGIN;

-- Verify and create auth tables if missing
DO $$
BEGIN
    -- Create type if not exists
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'aal_level') THEN
        CREATE TYPE aal_level AS ENUM ('aal1', 'aal2', 'aal3');
    END IF;

    -- Create or update auth.users
    CREATE TABLE IF NOT EXISTS auth.users (
        instance_id uuid,
        id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
        aud varchar(255),
        role varchar(255),
        email varchar(255) UNIQUE,
        encrypted_password varchar(255),
        email_confirmed_at timestamptz,
        invited_at timestamptz,
        confirmation_token varchar(255),
        confirmation_sent_at timestamptz,
        recovery_token varchar(255),
        recovery_sent_at timestamptz,
        email_change_token varchar(255),
        email_change varchar(255),
        email_change_sent_at timestamptz,
        last_sign_in_at timestamptz,
        raw_app_meta_data jsonb,
        raw_user_meta_data jsonb,
        is_super_admin boolean,
        created_at timestamptz,
        updated_at timestamptz,
        phone varchar(255) UNIQUE,
        phone_confirmed_at timestamptz,
        phone_change varchar(255),
        phone_change_token varchar(255),
        phone_change_sent_at timestamptz,
        confirmed_at timestamptz,
        email_change_confirm_status smallint DEFAULT 0,
        banned_until timestamptz,
        reauthentication_token varchar(255),
        reauthentication_sent_at timestamptz,
        is_sso_user boolean DEFAULT false,
        deleted_at timestamptz
    );

    -- Create or update auth.sessions
    CREATE TABLE IF NOT EXISTS auth.sessions (
        id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
        created_at timestamptz,
        updated_at timestamptz,
        factor_id uuid,
        aal aal_level,
        not_after timestamptz
    );

    -- Create or update auth.identities
    CREATE TABLE IF NOT EXISTS auth.identities (
        id text NOT NULL,
        user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        identity_data jsonb NOT NULL,
        provider text NOT NULL,
        last_sign_in_at timestamptz,
        created_at timestamptz,
        updated_at timestamptz,
        CONSTRAINT identities_pkey PRIMARY KEY (provider, id)
    );

    -- Create or update auth.instances
    CREATE TABLE IF NOT EXISTS auth.instances (
        id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
        uuid uuid,
        raw_base_config text,
        created_at timestamptz,
        updated_at timestamptz
    );

    -- Create or update auth.refresh_tokens
    CREATE TABLE IF NOT EXISTS auth.refresh_tokens (
        instance_id uuid,
        id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        token varchar(255),
        user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
        revoked boolean,
        created_at timestamptz,
        updated_at timestamptz,
        parent varchar(255),
        session_id uuid REFERENCES auth.sessions(id) ON DELETE CASCADE
    );

    -- Add missing columns if any to auth.users
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'auth' AND table_name = 'users' AND column_name = 'email_change_confirm_status') THEN
            ALTER TABLE auth.users ADD COLUMN email_change_confirm_status smallint DEFAULT 0;
        END IF;
        IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'auth' AND table_name = 'users' AND column_name = 'is_sso_user') THEN
            ALTER TABLE auth.users ADD COLUMN is_sso_user boolean DEFAULT false;
        END IF;
    END $$;

    -- Set default timestamps
    ALTER TABLE auth.users ALTER COLUMN created_at SET DEFAULT now();
    ALTER TABLE auth.users ALTER COLUMN updated_at SET DEFAULT now();
    ALTER TABLE auth.identities ALTER COLUMN created_at SET DEFAULT now();
    ALTER TABLE auth.identities ALTER COLUMN updated_at SET DEFAULT now();
    ALTER TABLE auth.sessions ALTER COLUMN created_at SET DEFAULT now();
    ALTER TABLE auth.sessions ALTER COLUMN updated_at SET DEFAULT now();

    -- Add helpful indexes
    CREATE INDEX IF NOT EXISTS users_instance_id_idx ON auth.users(instance_id);
    CREATE INDEX IF NOT EXISTS users_email_idx ON auth.users(email);
    CREATE INDEX IF NOT EXISTS users_created_at_idx ON auth.users(created_at);
    CREATE INDEX IF NOT EXISTS identities_user_id_idx ON auth.identities(user_id);

END $$;

-- Reset and grant permissions
GRANT USAGE ON SCHEMA auth TO anon, authenticated, service_role;

-- Grant selective permissions to anon
GRANT INSERT, SELECT ON auth.users TO anon;
GRANT INSERT, SELECT ON auth.identities TO anon;
GRANT INSERT, SELECT ON auth.sessions TO anon;
GRANT SELECT ON auth.refresh_tokens TO anon;

-- Grant selective permissions to authenticated
GRANT SELECT ON auth.users TO authenticated;
GRANT SELECT ON auth.identities TO authenticated;
GRANT SELECT ON auth.sessions TO authenticated;
GRANT SELECT ON auth.refresh_tokens TO authenticated;

-- Grant all permissions to service_role
GRANT ALL ON ALL TABLES IN SCHEMA auth TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA auth TO service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA auth TO service_role;

-- Ensure RLS is disabled on auth.users
ALTER TABLE auth.users DISABLE ROW LEVEL SECURITY;

-- Allow public registration
DROP POLICY IF EXISTS "Allow public registration" ON auth.users;
CREATE POLICY "Allow public registration" 
    ON auth.users 
    FOR INSERT 
    WITH CHECK (true);

COMMIT;
